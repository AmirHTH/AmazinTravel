/* Generated by Together */

package impl.miw.business.viajemanager;

import java.util.Map;
import java.util.Vector;

import org.springframework.beans.factory.annotation.Autowired;

import com.miw.business.ViajeManagerService;
import com.miw.model.ParamBusquedaViaje;
import com.miw.model.Viaje;
import com.miw.persistence.ViajeDataService;

public class ViajeManager implements ViajeManagerService {

	@Autowired
	private ViajeDataService viajeDataService;
	
	
	//private Map<Integer,Integer> disccounts;
	
	

	public void setViajeDataService(ViajeDataService viajeDataService) {
		this.viajeDataService = viajeDataService;
	}


	public Vector<Viaje> getViajes() throws Exception
	{
		
		Vector<Viaje> viajes = viajeDataService.getViajes();
		//Vector<Iva> ivas= ivaDataService.getIvas();
		/*
		for ( Viaje viaje: viajes)
		{
			for ( Iva iva:ivas)
			{
				if ( book.getFamily()==iva.getFamily())
				{
					//Aplicamos el descuento por familia al calcular el precio
					book.setPrice(book.getBasePrice()*iva.getValue()*(100-disccounts.get(book.getFamily() ) )/100 );
					
				}
			}
		}
		*/
		return viajes;
	}
	
	@Override
	public int getPlazasLibresViaje(Viaje viaje) throws Exception {
		int plazasLibres = viajeDataService.getPlazasLibresViaje(viaje);
		return plazasLibres;
	}

	@Override
	public Vector<Viaje> getViajesIda(ParamBusquedaViaje paramBusquedaViaje) throws Exception {
		Vector<Viaje> viajes = viajeDataService.getViajesIda(paramBusquedaViaje);
		return viajes;
	}
	
	@Override
	public Vector<Viaje> getViajesVuelta(ParamBusquedaViaje paramBusquedaViaje) throws Exception {
		Vector<Viaje> viajes = viajeDataService.getViajesVuelta(paramBusquedaViaje);
		return viajes;
	}
	
	public boolean hayViajesConPlazasLibres(ParamBusquedaViaje paramBusquedaViaje) throws Exception{
		return viajeDataService.hayViajesConPlazasLibres(paramBusquedaViaje);
	}

	@Override
	public Viaje getViaje(Viaje viaje) throws Exception {
		return viajeDataService.getViaje(viaje);
	}

	@Override
	public boolean restarPlazas(Viaje viaje, int plazas) throws Exception {
		return viajeDataService.restarPlazas(viaje, plazas);
	}
	
	@Override
	public boolean agregarPlazas(Viaje viaje, int plazas) throws Exception{
		return viajeDataService.agregarPlazas(viaje, plazas);
	}
	
	
}
