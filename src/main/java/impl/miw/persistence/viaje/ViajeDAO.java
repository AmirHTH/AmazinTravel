package impl.miw.persistence.viaje;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;

import com.miw.model.Book;
import com.miw.model.ParamBusquedaViaje;
import com.miw.model.Viaje;
import com.miw.persistence.BookDataService;
import com.miw.persistence.ViajeDataService;

/**
 * Clase que implementa las operaciones de acceso a la base de datos para la
 * entidad LIBRO.
 * 
 * @author Daniel F. Lanvin
 * @since 24/02/2004
 * @version 1.0
 */
public class ViajeDAO implements ViajeDataService {
	/**
	 * Metodo que accede a la base de datos para recuerar la lista de todos los viajes
	 * presentes en la base de datos.
	 */
	public Vector<Viaje> getViajes() throws Exception {
		// Inicializamos el Vector de retorno.
		Vector<Viaje> resultado = new Vector<Viaje>();

		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection con = null;

		try {
			String SQL_DRV = "org.hsqldb.jdbcDriver";
			String SQL_URL = "jdbc:hsqldb:hsql://localhost/amazin";

			// Obtenemos la conexion a la base de datos.
			Class.forName(SQL_DRV);
			con = DriverManager.getConnection(SQL_URL, "dflanvin", "amazin");

			ps = con.prepareStatement("select * from viaje");
			rs = ps.executeQuery();

			while (rs.next()) {
				// Completamos los datos del viaje en la entidad
				Viaje viaje = new Viaje();
				viaje.setViajeId(rs.getInt("viajeid"));
				viaje.setOrigen(rs.getString("origen"));
				viaje.setDestino(rs.getString("destino"));
				viaje.setF_salida(rs.getTimestamp("f_salida"));
				viaje.setPlazas_totales(rs.getInt("PLAZAS_TOTALES"));
				viaje.setPlazas_quedan(rs.getInt("PLAZAS_QUEDAN"));
				viaje.setPrecio(rs.getDouble("precio"));
				// La agregamos al Vector de resultado
				resultado.add(viaje);
				
				/*
				private Date f_salida;
				private int plazas_totales;
				private int plazas_quedan;
				private double precio;
				
				
				VIAJEID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
				ORIGEN VARCHAR(50),
				DESTINO VARCHAR(50),
				F_SALIDA TIMESTAMP, 
				PLAZAS_TOTALES INTEGER,
				PLAZAS_QUEDAN INTEGER,
				PRECIO DOUBLE,
				*/
				
			}

		} catch (Exception e) {
			e.printStackTrace();
			throw (e);
		} finally {
			try {
				ps.close();
				con.close();
			} catch (Exception e) {
			}
		}
		// Retornamos el vector de resultado.
		return resultado;
	}
	
	private Connection conectarConBD(){
		Connection con = null;

		try {
			String SQL_DRV = "org.hsqldb.jdbcDriver";
			String SQL_URL = "jdbc:hsqldb:hsql://localhost/amazin";

			// Obtenemos la conexion a la base de datos.
			Class.forName(SQL_DRV);
			con = DriverManager.getConnection(SQL_URL, "dflanvin", "amazin");
			return con;
		}catch(Exception e){
			return null;
		}
	}
	
	
	public Vector<Viaje> getViajesIda(ParamBusquedaViaje params) throws Exception {
		// Inicializamos el Vector de retorno.
		Vector<Viaje> resultado = new Vector<Viaje>();

		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection con = conectarConBD();

		try {
			
			ps = con.prepareStatement("select * from viaje where origen = ? and destino = ? and plazas_quedan >= ? and cast(f_salida as date) = ? ");
			ps.setString(1, params.getOrigen());
			ps.setString(2, params.getDestino());
			ps.setInt(3,  params.getPlazas());
			ps.setDate(4, new java.sql.Date(params.getFechaIda().getTime()));
			
			rs = ps.executeQuery();

			while (rs.next()) {
				// Completamos los datos del viaje en la entidad
				Viaje viaje = new Viaje();
				viaje.setViajeId(rs.getInt("viajeid"));
				viaje.setOrigen(rs.getString("origen"));
				viaje.setDestino(rs.getString("destino"));
				viaje.setF_salida(rs.getTimestamp("f_salida"));
				viaje.setPlazas_totales(rs.getInt("PLAZAS_TOTALES"));
				viaje.setPlazas_quedan(rs.getInt("PLAZAS_QUEDAN"));
				viaje.setPrecio(rs.getDouble("precio"));
				// La agregamos al Vector de resultado
				resultado.add(viaje);	
			}

		} catch (Exception e) {
			e.printStackTrace();
			throw (e);
		} finally {
			try {
				ps.close();
				con.close();
			} catch (Exception e) {
			}
		}
		// Retornamos el vector de resultado.
		return resultado;
	}
	
	public Vector<Viaje> getViajesVuelta(ParamBusquedaViaje params) throws Exception {
		// Inicializamos el Vector de retorno.
		Vector<Viaje> resultado = new Vector<Viaje>();

		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection con = conectarConBD();

		try {
			
			ps = con.prepareStatement("select * from viaje where origen = ? and destino = ? and plazas_quedan >= ? and cast(f_salida as date) = ?");
			ps.setString(1, params.getDestino()); //Si lo quiere Ida y Vuelta, en la Vuelta, el sitio de Destino será donde se inicie el vuelo
			ps.setString(2, params.getOrigen());
			ps.setInt(3,  params.getPlazas());
			ps.setDate(4, new java.sql.Date(params.getFechaVuelta().getTime()));
			rs = ps.executeQuery();

			while (rs.next()) {
				// Completamos los datos del viaje en la entidad
				Viaje viaje = new Viaje();
				viaje.setViajeId(rs.getInt("viajeid"));
				viaje.setOrigen(rs.getString("origen"));
				viaje.setDestino(rs.getString("destino"));
				viaje.setF_salida(rs.getTimestamp("f_salida"));
				viaje.setPlazas_totales(rs.getInt("PLAZAS_TOTALES"));
				viaje.setPlazas_quedan(rs.getInt("PLAZAS_QUEDAN"));
				viaje.setPrecio(rs.getDouble("precio"));
				// La agregamos al Vector de resultado
				resultado.add(viaje);
			}

		} catch (Exception e) {
			e.printStackTrace();
			throw (e);
		} finally {
			try {
				ps.close();
				con.close();
			} catch (Exception e) {
			}
		}
		// Retornamos el vector de resultado.
		return resultado;
	}
	
	
	public boolean hayViajesConPlazasLibres(ParamBusquedaViaje params) throws Exception {
		// Inicializamos el Vector de retorno.
		Vector<Viaje> resultado = new Vector<Viaje>();
		boolean hayViajes = false;

		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection con = conectarConBD();

		try {
			
			ps = con.prepareStatement("select * from viaje where origen = ? and destino = ? and cast(f_salida as date) = ? ");
			ps.setString(1, params.getOrigen());
			ps.setString(2, params.getDestino());
			ps.setDate(3, new java.sql.Date(params.getFechaIda().getTime()));
			
			rs = ps.executeQuery();


			while (rs.next()) {
				// Completamos los datos del viaje en la entidad
				Viaje viaje = new Viaje();
				resultado.add(viaje);	
			}

		} catch (Exception e) {
			e.printStackTrace();
			throw (e);
		} finally {
			try {
				ps.close();
				con.close();
			} catch (Exception e) {
			}
		}
		// Retornamos el vector de resultado.
		
		if(resultado.size() != 0){
			hayViajes = true;
		}
		
		return hayViajes;
	}
	
	
	public int getPlazasLibresViaje(Viaje viaje) throws Exception {
		// Inicializamos el Vector de retorno.
		int plazasLibres = 0;
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection con = conectarConBD();

			try {
				ps = con.prepareStatement("select PLAZAS_QUEDAN as plazas_quedan from viaje where viajeid = ?");
				ps.setInt(1, viaje.getViajeId());					
				rs = ps.executeQuery();

				while (rs.next()) {
					plazasLibres = rs.getInt("plazas_quedan");
				}

			} catch (Exception e) {
				e.printStackTrace();
				throw (e);
			} finally {
				try {
					ps.close();
					con.close();
				} catch (Exception e) {
				}
			}
			
		// Retornamos el vector de resultado.
		return plazasLibres;
	}
	
	

	public Viaje getViaje(Viaje viaje) throws Exception{
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection con = conectarConBD();

		try {	
			ps = con.prepareStatement("select * from viaje where viajeid = ?");
			ps.setInt(1, viaje.getViajeId()); //Si lo quiere Ida y Vuelta, en la Vuelta, el sitio de Destino será donde se inicie el vuelo
			rs = ps.executeQuery();

			while (rs.next()) {
				// Completamos los datos del viaje en la entidad
				viaje.setViajeId(rs.getInt("viajeid"));
				viaje.setOrigen(rs.getString("origen"));
				viaje.setDestino(rs.getString("destino"));
				viaje.setF_salida(rs.getTimestamp("f_salida"));
				viaje.setPlazas_totales(rs.getInt("PLAZAS_TOTALES"));
				viaje.setPlazas_quedan(rs.getInt("PLAZAS_QUEDAN"));
				viaje.setPrecio(rs.getDouble("precio"));
			}

		} catch (Exception e) {
			e.printStackTrace();
			throw (e);
		} finally {
			try {
				ps.close();
				con.close();
			} catch (Exception e) {
			}
		}
		// Retornamos el vector de resultado.
		return viaje;
	}
	
	
	
	public boolean restarPlazas(Viaje viaje, int plazas) throws Exception{
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection con = conectarConBD();

		try {	
			ps = con.prepareStatement("select PLAZAS_QUEDAN from viaje where viajeid = ?");
			ps.setInt(1, viaje.getViajeId()); 
			rs = ps.executeQuery();
			Integer numeroPlazasQuedan = 0;
			
			while (rs.next()) {
				numeroPlazasQuedan = rs.getInt("PLAZAS_QUEDAN");
			}
					
			ps = con.prepareStatement("update viaje set PLAZAS_QUEDAN = ? where viajeid = ?");
			ps.setInt(1, numeroPlazasQuedan-plazas); 
			ps.setInt(2, viaje.getViajeId()); 
			ps.executeUpdate();
	

		} catch (Exception e) {
			e.printStackTrace();
			throw (e);
		} finally {
			try {
				ps.close();
				con.close();
			} catch (Exception e) {
			}
		}
		
		return true;
	}

	@Override
	public boolean agregarPlazas(Viaje viaje, int plazas) throws Exception {
		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection con = conectarConBD();

		try {	
			ps = con.prepareStatement("select PLAZAS_QUEDAN from viaje where viajeid = ?");
			ps.setInt(1, viaje.getViajeId()); 
			rs = ps.executeQuery();
			Integer numeroPlazasQuedan = 0;
			
			while (rs.next()) {
				numeroPlazasQuedan = rs.getInt("PLAZAS_QUEDAN");
			}
					
			ps = con.prepareStatement("update viaje set PLAZAS_QUEDAN = ? where viajeid = ?");
			ps.setInt(1, numeroPlazasQuedan+plazas); 
			ps.setInt(2, viaje.getViajeId()); 
			ps.executeUpdate();
	

		} catch (Exception e) {
			e.printStackTrace();
			throw (e);
		} finally {
			try {
				ps.close();
				con.close();
			} catch (Exception e) {
			}
		}
		
		return true;
	}
	
	
	/*
	public synchronized Book newBook(Book book) throws Exception {

		PreparedStatement ps = null;
		ResultSet rs = null;
		Connection con = null;

		try {
			String SQL_DRV = "org.hsqldb.jdbcDriver";
			String SQL_URL = "jdbc:hsqldb:hsql://localhost/amazin";

			// Obtenemos la conexiï¿½n a la base de datos.
			Class.forName(SQL_DRV);
			con = DriverManager.getConnection(SQL_URL, "dflanvin", "amazin");

			ps = con.prepareStatement("select max(id) as maximo from libro");
			rs = ps.executeQuery();
			Integer id=0;
			while (rs.next()) {
				 id = rs.getInt("maximo");
			}
			
			System.out.println("Máximo id encontrado: "+id);
			
			book.setId(id);
			//Creamos el libro
			ps = con.prepareStatement("insert into libro values (?,?,?,?,?,?)");
			ps.setInt(1, id+1);
			ps.setString(2, book.getTitle());
			ps.setString(3, book.getDescription());
			ps.setString(4, book.getAuthor());
			ps.setInt(5, book.getFamily());
			ps.setDouble(6,  book.getBasePrice());
			ps.executeUpdate();

		} catch (Exception e) {
			e.printStackTrace();
			throw (e);
		} finally {
			try {
				ps.close();
				con.close();
			} catch (Exception e) {
			}
		}
		// Retornamos el vector de resultado.
		return book;
	}
 */
}